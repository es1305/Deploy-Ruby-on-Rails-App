---
# Do not forget to do
# export AWS_ACCESS_KEY=XXXXXXXXXX
# export AWS_SECRET_KEY=XXXXXXXXXXXXXXX
# before execute

- name: Install acme.sh
  shell: wget -O - https://get.acme.sh | sh
  args:
    creates: "/{{ acme_user }}/.acme.sh"
    warn: False

- name: Issue certificate
  shell: |
    export AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY') }}
    export AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_KEY') }}
    /{{ acme_user }}/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /{{ acme_user }}/.acme.sh/acme.sh --issue --dns dns_aws -d {{ acme_domain_name }} -d *.{{ acme_domain_name }}
  args:
    creates: /{{ acme_user }}/.acme.sh/{{ acme_domain_name }}/ca.cer
    warn: False
  register: issue
  failed_when: issue.rc == 1

- name: Install certificate
  shell: |
    /{{ acme_user }}/.acme.sh/acme.sh --install-cert -d {{ acme_domain_name }} \
      --fullchain-file {{ acme_fullchain_file }} \
      --key-file {{ acme_key_file }} \
      --reloadcmd "{{ acme_reload_cmd }}"
  args:
    creates: /{{ acme_user }}/.acme.sh/{{ acme_domain_name }}/fullchain.cer
    warn: False
  register: install
  failed_when: install.rc != 0

- name: Install SSL vhost config
  template:
    src: "vhost.conf.j2"
    dest: "/etc/nginx/sites-available/{{ acme_domain_name }}.conf"
    owner: root
    group: root
    mode: 0644
  notify: reload Nginx

- name: Enables new site
  file:
    src: "/etc/nginx/sites-available/{{ acme_domain_name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ acme_domain_name }}.conf"
    state: link
  notify: reload Nginx

- name: Removes http site
  file:
    path: "/etc/nginx/sites-enabled/{{ http_vhost }}"
    state: absent
  notify: reload Nginx
